--Jesús Emiliano García Jiménez
--A01751766
--Procesador final


library ieee;
use ieee.std_logic_1164.all;

entity Procesador is
    port(
        clk, rst       : in std_logic;
        -- Puerto de entrada/salida
        p_in_00, p_in_01, p_in_02, p_in_03 : in std_logic_vector(7 downto 0);
        p_in_04, p_in_05, p_in_06, p_in_07 : in std_logic_vector(7 downto 0);
        p_in_08, p_in_09, p_in_10, p_in_11 : in std_logic_vector(7 downto 0);
        p_in_12, p_in_13, p_in_14, p_in_15 : in std_logic_vector(7 downto 0);
        p_out_00, p_out_01, p_out_02, p_out_03 : out std_logic_vector(7 downto 0);
        p_out_04, p_out_05, p_out_06, p_out_07 : out std_logic_vector(7 downto 0);
        p_out_08, p_out_09, p_out_10, p_out_11 : out std_logic_vector(7 downto 0);
        p_out_12, p_out_13, p_out_14, p_out_15 : out std_logic_vector(7 downto 0)
    );
end entity;

architecture structural of Procesador is
    -- Componentes
    component control_unit is
        port (
            clk, rst       : in std_logic;
            CCR_Result    : in std_logic_vector(3 downto 0);
            IR            : in std_logic_vector(7 downto 0);
            A_Load, B_Load, CCR_Load : out std_logic;
            IR_Load, MAR_Load, PC_Load, PC_Inc : out std_logic;
            ALU_Sel       : out std_logic_vector(3 downto 0);
            Bus1_Sel, Bus2_Sel : out std_logic_vector(1 downto 0);
            wr            : out std_logic
        );
    end component;
    
    component data_path is 
        port(
            clk, rst, IR_Load, MAR_Load, PC_Load : in std_logic;
            PC_Inc, A_Load, B_Load, CCR_Load : in std_logic;
            ALU_Sel : in std_logic_vector(3 downto 0);
            Bus1_Sel, Bus2_Sel : in std_logic_vector(1 downto 0);
            from_memory : in std_logic_vector(7 downto 0);
            IR, address, to_memory : out std_logic_vector(7 downto 0);
            CCR_Result : out std_logic_vector(3 downto 0)
        );
    end component;
    
    component memoria is 
        port(
            clk, rst, wr : in std_logic;
            address : in std_logic_vector(7 downto 0);
            data_in : in std_logic_vector(7 downto 0);
            p_in_00, p_in_01, p_in_02, p_in_03 : in std_logic_vector(7 downto 0);
            p_in_04, p_in_05, p_in_06, p_in_07 : in std_logic_vector(7 downto 0);
            p_in_08, p_in_09, p_in_10, p_in_11 : in std_logic_vector(7 downto 0);
            p_in_12, p_in_13, p_in_14, p_in_15 : in std_logic_vector(7 downto 0);
            data_out : out std_logic_vector(7 downto 0);
            p_out_00, p_out_01, p_out_02, p_out_03 : out std_logic_vector(7 downto 0);
            p_out_04, p_out_05, p_out_06, p_out_07 : out std_logic_vector(7 downto 0);
            p_out_08, p_out_09, p_out_10, p_out_11 : out std_logic_vector(7 downto 0);
            p_out_12, p_out_13, p_out_14, p_out_15 : out std_logic_vector(7 downto 0)
        );
    end component;
    
    -- Señales de interconexión
    signal A_Load_s, B_Load_s, CCR_Load_s : std_logic;
    signal IR_Load_s, MAR_Load_s, PC_Load_s, PC_Inc_s : std_logic;
    signal wr_s : std_logic;
    signal ALU_Sel_s : std_logic_vector(3 downto 0);
    signal Bus1_Sel_s, Bus2_Sel_s : std_logic_vector(1 downto 0);
    signal CCR_Result_s : std_logic_vector(3 downto 0);
    signal IR_s, address_s, to_memory_s, from_memory_s : std_logic_vector(7 downto 0);
    
begin
    -- Instanciación de la Unidad de Control
    CU: control_unit port map(
        clk => clk,
        rst => rst,
        CCR_Result => CCR_Result_s,
        IR => IR_s,
        A_Load => A_Load_s,
        B_Load => B_Load_s,
        CCR_Load => CCR_Load_s,
        IR_Load => IR_Load_s,
        MAR_Load => MAR_Load_s,
        PC_Load => PC_Load_s,
        PC_Inc => PC_Inc_s,
        ALU_Sel => ALU_Sel_s,
        Bus1_Sel => Bus1_Sel_s,
        Bus2_Sel => Bus2_Sel_s,
        wr => wr_s
    );
    
    -- Instanciación del Data Path
    DP: data_path port map(
        clk => clk,
        rst => rst,
        IR_Load => IR_Load_s,
        MAR_Load => MAR_Load_s,
        PC_Load => PC_Load_s,
        PC_Inc => PC_Inc_s,
        A_Load => A_Load_s,
        B_Load => B_Load_s,
        CCR_Load => CCR_Load_s,
        ALU_Sel => ALU_Sel_s,
        Bus1_Sel => Bus1_Sel_s,
        Bus2_Sel => Bus2_Sel_s,
        from_memory => from_memory_s,
        IR => IR_s,
        address => address_s,
        to_memory => to_memory_s,
        CCR_Result => CCR_Result_s
    );
    
    -- Instanciación de la Memoria
    MEM: memoria port map(
        clk => clk,
        rst => rst,
        wr => wr_s,
        address => address_s,
        data_in => to_memory_s,
        p_in_00 => p_in_00,
        p_in_01 => p_in_01,
        p_in_02 => p_in_02,
        p_in_03 => p_in_03,
        p_in_04 => p_in_04,
        p_in_05 => p_in_05,
        p_in_06 => p_in_06,
        p_in_07 => p_in_07,
        p_in_08 => p_in_08,
        p_in_09 => p_in_09,
        p_in_10 => p_in_10,
        p_in_11 => p_in_11,
        p_in_12 => p_in_12,
        p_in_13 => p_in_13,
        p_in_14 => p_in_14,
        p_in_15 => p_in_15,
        data_out => from_memory_s,
        p_out_00 => p_out_00,
        p_out_01 => p_out_01,
        p_out_02 => p_out_02,
        p_out_03 => p_out_03,
        p_out_04 => p_out_04,
        p_out_05 => p_out_05,
        p_out_06 => p_out_06,
        p_out_07 => p_out_07,
        p_out_08 => p_out_08,
        p_out_09 => p_out_09,
        p_out_10 => p_out_10,
        p_out_11 => p_out_11,
        p_out_12 => p_out_12,
        p_out_13 => p_out_13,
        p_out_14 => p_out_14,
        p_out_15 => p_out_15
    );
    
end architecture;